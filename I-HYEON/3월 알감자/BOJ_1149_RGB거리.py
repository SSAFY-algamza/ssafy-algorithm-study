'''
집은 일렬로 n개 있다. 1번부터 n번까지 번호가 붙어 있다.
한 집을 세가지 색 중 하나로 칠할 수 있는데, 연속하는 집은 서로 색깔이 달라야한다.
이 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구하라.
각 집을 칠할 때 색별로 드는 비용은 집마다 달라서, 입력으로 주어진다.

아이디어
1. 그 때 그 때 제일 유리한 선택 '즉, 매 집마다 세가지 색 중 가장 최소 비용이 드는 하나'를 선택하는 방식으로 값을 구해 나가면,
연속 해서 같은 색을 칠할 수 없다는 조건 때문에 (나중에 어떤 경우가 생길지 몰라서) 최소 비용을 보장할 수 없다.

따라서, 매 선택마다 (하나를 고르는 게 아니라)
빨강을 골랐을 때, 초록을 골랐을 때, 파랑을 골랐을 때 3가지 경우를 모두 최소 비용으로 저장해가면서 끝까지 가서, 비교해야 한다.

2. i번째 집을 빨강/초록/파랑 각각으로 색칠할 때 각각의 최소 비용은
i-1번째 집을 초록으로 칠했을 때의 비용 vs 파랑으로 칠했을 때 비용 중 더 작은 값을 골라 현재 집의 빨강 비용과 더하기
i-1번째 집을 빨강으로 칠했을 때 비용 vs 파랑으로 칠했을 때 비용 중 더 작은 값을 골라 현재 집의 초록 비용과 더하기
i-1번째 집을 빨강으로 칠했을 때 비용 vs 초록으로 칠했을 때 비용 중 더 작은 값을 골라 현재 집의 파랑 비용과 더하기
가 된다.

3. 이를 위해서
RGB를 저장할 크기가 3인 배열
입력을 저장할 크기가 N인 배열이 필요하다.

'''

N = int(input())
cost_info = []
for _ in range(N):
    r,g,b = map(int,input().split())
    cost_info.append([r,g,b])  # cost_info 에 각 집의 비용 정보가 담김

RGB = cost_info[0]  # 마지막에 각각 빨강,초록,파랑으로 끝난 경우의 최소 비용을 담을 배열 / 시작값은 제일 첫번째집의 비용 정보로 초기화
# print(RGB)
for i in range(1,N):  # cost_info를 두번째 집부터 순회하면서 가져오기
    RGB[0], RGB[1], RGB[2] = min(RGB[1], RGB[2]) + cost_info[i][0], min(RGB[0], RGB[2]) + cost_info[i][1],min(RGB[0], RGB[1]) + cost_info[i][2]

print(min(RGB))
